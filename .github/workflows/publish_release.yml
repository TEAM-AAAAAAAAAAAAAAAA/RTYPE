name: Publish Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version string'
        required: true
        default: '0.0.0'
      body:
        description: 'Release body'
        required: true
        default: 'Release body'
env:
  BUILD_TYPE: Release
  SERV_BIN: rtype_server
  CLIENT_BIN: rtype_client
  VCPKG_COMMIT: 57d3194e702a2959e86a6748999ad71fc24f7922
  VCPKG_DISABLE_METRICS: true

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        platform: [ windows-latest, ubuntu-latest, macos-latest ]
        include:
          - platform: windows-latest
            triplet: x64-windows
          - platform: ubuntu-latest
            triplet: x64-linux
          - platform: macos-latest
            triplet: x64-osx
    runs-on: ${{ matrix.platform }}
    env:
        VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
    environment:
      name: production
    permissions:
      contents: read
    steps:
      - name: Install system deps for Linux
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt update -y && sudo apt upgrade -y
          sudo apt install -y libx11-dev libxrandr-dev libxi-dev libudev-dev libgl1-mesa-dev autoconf libtool

      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Run vcpkg
        uses: lukka/run-vcpkg@v4
        with:
          vcpkgArguments: 'sfml boost-asio boost-thread'
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: '${{ env.VCPKG_COMMIT }}'

      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Configure
        shell: cmake -P {0}
        run: |
          cmake_path(SET VCPKG_TOOLCHAIN_PATH ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake)
          message(STATUS "Using vcpkg.cmake in: ${VCPKG_TOOLCHAIN_PATH}")
          cmake_path(SET SFML_DIR ${{ github.workspace }}/vcpkg/installed/${{ matrix.triplet }}/share/sfml)
          message(STATUS "Using SFML_DIR: ${SFML_DIR}")
          if (${{ matrix.platform }} STREQUAL "windows-latest")
            execute_process(
              COMMAND cmake
                -S .
                -B build
                -G "Visual Studio 17 2022"
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
                -DCMAKE_TOOLCHAIN_FILE=${VCPKG_TOOLCHAIN_PATH}
                -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=TRUE
                -DBUILD_SHARED_LIBS=TRUE
            RESULT_VARIABLE result
            )
          else()
            execute_process(
              COMMAND cmake
                -S .
                -B build
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
                -DCMAKE_TOOLCHAIN_FILE=${VCPKG_TOOLCHAIN_PATH}
              RESULT_VARIABLE result
            )
          endif()
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status. Failed to configure RTYPE project.")
          endif()

      - name: Build
        shell: cmake -P {0}
        run: |
          message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

          execute_process(
            COMMAND cmake --build build
            RESULT_VARIABLE result
          )
          if (${{ matrix.platform }} STREQUAL "windows-latest")
            configure_file(${{ github.workspace }}/Debug/r-type_client.exe ${{ github.workspace }} COPYONLY)
            configure_file(${{ github.workspace }}/Debug/r-type_server.exe ${{ github.workspace }} COPYONLY)
          endif()
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status. Failed to build RTYPE project.")
          endif()

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform }}
          path: |
            ${{ github.workspace }}/assets
            ${{ github.workspace }}/vcpkg/installed/${{ matrix.triplet }}/
            ${{ github.workspace }}/vcpkg/scripts/
            ${{ github.workspace }}/r-type_client*
            ${{ github.workspace }}/r-type_server*

  create_release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    environment:
      name: production
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          body: ${{ github.event.inputs.body }}
          draft: false
          prerelease: false

  upload_release_assets:
    runs-on: ubuntu-latest
    needs: create_release
    permissions:
      contents: write
    environment:
      name: production
    strategy:
      fail-fast: true
      matrix:
        artifacts: [ windows-latest, ubuntu-latest, macos-latest ]
    steps:
      - name: Download Artifacts
        id: download_artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.artifacts }}
          path: ${{ github.workspace }}/${{ matrix.artifacts }}

      - name: Upload Release Assets
        id: upload_release_assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            asset_path: ${{ github.workspace }}/${{ matrix.artifacts }}
            asset_name: RTYPE Binaries 
            upload_url: ${{ steps.create_release.outputs.upload_url }}