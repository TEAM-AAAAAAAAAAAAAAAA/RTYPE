name: ci/cd

on:
  push:
    branches: [ main ]
  delete:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  SERV_BIN: "r-type_server"
  CLIENT_BIN: "r-type_client"

jobs:
  clean_repo:
    name: Delete useless files
    runs-on: ubuntu-latest
    env:
      USELESS_FILES_REGEX: (.*\.gc(no|da|ov))$|(.*\.(a|o))$|(.*~)$|^(#.*#)$|^tmp\/.*|.*\/tmp\/.*
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Find useless files recursively
        run: |
          USELESS_FILES=$(find . -type f -printf '%P\n' | { grep -P "${{ env.USELESS_FILES_REGEX }}" || true; })
          if [ "$USELESS_FILES" != "" ]; then
              IFS=$'\n'$'\r'
              for LINE in $USELESS_FILES; do
                  echo "::error file=${LINE},line=1,col=1,title=Useless file detected::${LINE}"
              done
              echo "FAIL_TASK=true" >> "$GITHUB_ENV"
          else
              echo "FAIL_TASK=false" >> "$GITHUB_ENV"
          fi
      - name: Check if task failed
        if: env.FAIL_TASK == 'true'
        run: exit 1

  build_linux:
    name: Check if the program build correctly
    runs-on: ubuntu-latest
    needs: [clean_repo]
    container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

#      - name: Test
#        working-directory: ${{github.workspace}}/build
#        # Execute tests defined by the CMake configuration.
#        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#        run: ctest -C ${{env.BUILD_TYPE}}

#      - name: Check executables
#        run: |
#          echo "FAIL_TASK=false" >> "$GITHUB_ENV"
#          SERV_BINARIES="${{ env.SERV_BIN }}"
#          IFS=$','
#          for BIN in $SERV_BINARIES; do
#            if [ ! -f "${BIN}" ]; then
#              echo "::error file=${BIN},title=Binary not found::${BIN}"
#              echo "FAIL_TASK=true" >> "$GITHUB_ENV"
#            fi
#            if [ ! -x "${BIN}" ]; then
#              echo "::error file=${BIN},title=Binary is not executable::${BIN}"
#              echo "FAIL_TASK=true" >> "$GITHUB_ENV"
#            fi
#          done
#          CLI_BINARIES="${{ env.CLIENT_BIN }}"
#          IFS=$','
#          for BIN in $CLI_BINARIES; do
#            if [ ! -f "${BIN}" ]; then
#              echo "::error file=${BIN},title=Binary not found::${BIN}"
#              echo "FAIL_TASK=true" >> "$GITHUB_ENV"
#            fi
#            if [ ! -x "${BIN}" ]; then
#              echo "::error file=${BIN},title=Binary is not executable::${BIN}"
#              echo "FAIL_TASK=true" >> "$GITHUB_ENV"
#            fi
#          done
#
#      - name: Check if task failed
#        if: env.FAIL_TASK == 'true'
#        run: exit 1

  build_windows:
    runs-on: windows-latest
    needs: [clean_repo]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TEST_SUITE=TRUE

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j

    # - name: Run Unit Tests
    #   run: cd ${{github.workspace}}/build && ctest -C ${{env.BUILD_TYPE}} --output-on-failure


  to_github:
    name: Push content of the current repo on mirror
    runs-on: ubuntu-latest
    needs: [build_linux, build_windows]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ secrets.EPI_RTYPE_REPO_URL }}
          ssh_private_key:
            ${{ secrets.EPI_RTYPE_MIRRORING_KEY }}
