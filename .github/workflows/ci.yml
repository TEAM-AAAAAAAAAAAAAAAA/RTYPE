name: Build

on:
  push:
    branches: [ main ]
  delete:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  SERV_BIN: rtype_server
  CLIENT_BIN: rtype_client
  VCPKG_COMMIT: 57d3194e702a2959e86a6748999ad71fc24f7922
  VCPKG_DISABLE_METRICS: true

jobs:

  clean_repo:
    name: Delete useless files
    runs-on: ubuntu-latest
    env:
      USELESS_FILES_REGEX: (.*\.gc(no|da|ov))$|(.*\.(a|o))$|(.*~)$|^(#.*#)$|^tmp\/.*|.*\/tmp\/.*
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Find useless files recursively
        run: |
          USELESS_FILES=$(find . -type f -printf '%P\n' | { grep -P "${{ env.USELESS_FILES_REGEX }}" || true; })
          if [ "$USELESS_FILES" != "" ]; then
              IFS=$'\n'$'\r'
              for LINE in $USELESS_FILES; do
                  echo "::error file=${LINE},line=1,col=1,title=Useless file detected::${LINE}"
              done
              echo "FAIL_TASK=true" >> "$GITHUB_ENV"
          else
              echo "FAIL_TASK=false" >> "$GITHUB_ENV"
          fi
      - name: Check if task failed
        if: env.FAIL_TASK == 'true'
        run: exit 1

  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [ windows-latest, ubuntu-latest, macos-latest ]
    needs: [clean_repo]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install system deps for Linux
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt update -y && sudo apt upgrade -y
          sudo apt install -y libx11-dev libxrandr-dev libxi-dev libudev-dev libgl1-mesa-dev

      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Run vcpkg
        uses: lukka/run-vcpkg@v4
        with:
          vcpkgArguments: 'sfml boost-asio boost-thread'
          vcpkgDirectory: '${{ github.workspace}}/vcpkg'

      - name: List directory
        run: |
          ls -lR  .

      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Configure
        shell: cmake -P {0}
        run: |
          if (${{ matrix.platform }} STREQUAL windows-latest)
            message(STATUS "Replacing slashes in VCPKG_TOOLCHAIN_PATH")
            cmake_path(SET VCPKG_TOOLCHAIN_PATH ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake)
          endif()
          message(STATUS "Using vcpkg.cmake in: ${VCPKG_TOOLCHAIN_PATH}")
          execute_process(
            COMMAND cmake
              -S .
              -B build
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
              -G Ninja
              -DCMAKE_TOOLCHAIN_FILE=${VCPKG_TOOLCHAIN_PATH}
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status. Failed to configure RTYPE project.")
          endif()

      - name: Build
        shell: cmake -P {0}
        run: |
          message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

          execute_process(
            COMMAND cmake --build build
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status. Failed to build RTYPE project.")
          endif()

      # - name: Check executables
      #   run: |
      #     echo "FAIL_TASK=false" >> "$GITHUB_ENV"
      #     SERV_BINARIES="${{ env.SERV_BIN }}"
      #     IFS=$','
      #     for BIN in $SERV_BINARIES; do
      #       if [ ! -f "${BIN}" ]; then
      #         echo "::error file=${BIN},title=Binary not found::${BIN}"
      #         echo "FAIL_TASK=true" >> "$GITHUB_ENV"
      #       fi
      #       if [ ! -x "${BIN}" ]; then
      #         echo "::error file=${BIN},title=Binary is not executable::${BIN}"
      #         echo "FAIL_TASK=true" >> "$GITHUB_ENV"
      #       fi
      #     done
      #     CLI_BINARIES="${{ env.CLIENT_BIN }}"
      #     IFS=$','
      #     for BIN in $CLI_BINARIES; do
      #       if [ ! -f "${BIN}" ]; then
      #         echo "::error file=${BIN},title=Binary not found::${BIN}"
      #         echo "FAIL_TASK=true" >> "$GITHUB_ENV"
      #       fi
      #       if [ ! -x "${BIN}" ]; then
      #         echo "::error file=${BIN},title=Binary is not executable::${BIN}"
      #         echo "FAIL_TASK=true" >> "$GITHUB_ENV"
      #       fi
      #     done

      # - name: Check if task failed
      #   if: env.FAIL_TASK == 'true'
      #   run: exit 1

  to_github:
    name: Push content of the current repo on mirror
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ secrets.EPI_RTYPE_REPO_URL }}
          ssh_private_key:
            ${{ secrets.EPI_RTYPE_MIRRORING_KEY }}
