name: Build

on:
  push:
    branches: [ main ]
  delete:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  SERV_BIN: r-type_server
  CLIENT_BIN: r-type_client

jobs:
  clean_repo:
    name: Delete useless files
    runs-on: ubuntu-latest
    env:
      USELESS_FILES_REGEX: (.*\.gc(no|da|ov))$|(.*\.(a|o))$|(.*~)$|^(#.*#)$|^tmp\/.*|.*\/tmp\/.*
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Find useless files recursively
        run: |
          USELESS_FILES=$(find . -type f -printf '%P\n' | { grep -P "${{ env.USELESS_FILES_REGEX }}" || true; })
          if [ "$USELESS_FILES" != "" ]; then
              IFS=$'\n'$'\r'
              for LINE in $USELESS_FILES; do
                  echo "::error file=${LINE},line=1,col=1,title=Useless file detected::${LINE}"
              done
              echo "FAIL_TASK=true" >> "$GITHUB_ENV"
          else
              echo "FAIL_TASK=false" >> "$GITHUB_ENV"
          fi
      - name: Check if task failed
        if: env.FAIL_TASK == 'true'
        run: exit 1

  build:
    name: Build on windows-latest, ubuntu-latest and macos-latests runners
    strategy:
      fail-fast: true
      matrix: # Make one workflow run on the multiple platforms
        platform: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v3

      - name: Get Cmake latest
        uses: lukka/get-cmake@latest

      - name: Restore artifacts, or setup  vcpkg (do not install any package)
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgGitCommitId: '57d3194e702a2959e86a6748999ad71fc24f7922'

      - name: Run Cmake with CMakePreset.json and vcpkg.json
        uses: lukka/run-cmake@v10


  to_github:
    name: Push content of the current repo on mirror
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ secrets.EPI_RTYPE_REPO_URL }}
          ssh_private_key:
            ${{ secrets.EPI_RTYPE_MIRRORING_KEY }}
